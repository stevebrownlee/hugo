[{"body":"Welcome to the Compose theme user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Compose's blocks and templates.\nGet started now ","link":"https://example.com/docs/compose/","section":"docs","title":"Compose Docs"},{"body":"The vast majority of your time as a beginner will be reading and understanding your code, and fixing errors in your code. Yes, you will write code, but as a beginner, you will make a plethora of mistakes, and fixing those mistakes takes more time than writing the code.\nRead all about the purpose of debugging and its power for a beginner...\nAbout the Debugger ","link":"https://example.com/debugging/","section":"debugging","title":"Debugger"},{"body":"These docs consists of two parts:\nHugo Compose Themes docs Hugo Clarity Theme docs. Please note that the features listed under each theme are independent of each other. That is to say, some features may only be found in one theme and not in both.\nCompose Theme Docs ","link":"https://example.com/docs/","section":"docs","title":"Themes' Docs"},{"body":" A debugger is a tool that allows you to pause the execution of your code, inspect the state of the program, and step through the code line by line to understand how the program is executing. This is especially useful for beginners because it allows them to understand what is happening in their code at a deeper level and can help them find and fix bugs more efficiently. For example, if you are working on a program and it is not producing the expected output, you can use a debugger to pause the execution of the program and inspect the variables and their values at different points in the code. This can help you understand why the program is not behaving as expected and allow you to identify and fix the issue.\nAdditionally, using a debugger can help beginners understand the flow of their code and how different parts of the program interact with each other. This can be especially helpful for those who are new to programming and are still learning how to think about problem solving and design solutions.\nOverall, learning to use a debugger is an important skill for beginners to develop because it can help them write more efficient and effective code and become better problem solvers.\nWant to Explore More? Visit the Microsoft: Debugger Overview where you can learn more about debugger configurations, breakpoints, logpoints, and the Console REPL.\nExplore the Projects ","link":"https://example.com/debugging/about/","section":"debugging","title":"About the Debugger"},{"body":"Prerequisites First ensure that you have hugo installed.\nYou need a recent extended version (we recommend version 0.61 or later) of Hugo to do local builds and previews of sites (like this one) that uses this theme.\nIf you install from the release page, make sure to get the extended Hugo version, which supports sass; you may need to scroll down the list of releases to see it.\nFor comprehensive Hugo documentation, see gohugo.io.\nRun your site with compose theme You could go with the options right below.\nOption 1 (my favorite) This option enables you to load compose theme as a hugo module. First things first, ensure you have go binary installed on your machine.\n1git clone https://github.com/onweru/compose/ 2cd compose/exampleSite/ 3hugo server To pull in theme updates, run hugo mod get -u ./... from the theme folder. If unsure, learn how to update hugo modules\nThe exampleSite uses the theme as a hugo module by default.\nIf you choose Option 2 or Option 3 below, ensure you edit these lines in the config.toml file as advised on the comments. Else, you will not be able to pull theme updates.\nOption 2 (recommended) Generate a new Hugo site and add this theme as a Git submodule inside your themes folder:\n1hugo new site yourSiteName 2cd yourSiteName 3git init 4git submodule add https://github.com/onweru/compose/ themes/compose 5cp -a themes/compose/exampleSite/* . Then run\n1hugo server Hurray!\nOption 3 (Great for testing quickly) You can run your site directly from the exampleSite. To do so, use the following commands:\n1git clone https://github.com/onweru/compose/ 2cd compose/exampleSite/ 3hugo server --themesDir ../.. Although, option 3 is great for quick testing, it is somewhat problematic when you want to update your theme. You would need to be careful not to overwrite your changes. Once set, jump over to the config.toml file and start configuring your site.\n","link":"https://example.com/docs/compose/install-theme/","section":"docs","title":"Install theme"},{"body":"Prerequisites First ensure that you have hugo installed.\nYou need a recent extended version (we recommend version 0.61 or later) of Hugo to do local builds and previews of sites (like this one) that uses this theme.\nIf you install from the release page, make sure to get the extended Hugo version, which supports sass; you may need to scroll down the list of releases to see it.\nFor comprehensive Hugo documentation, see gohugo.io.\nRun your site with compose theme You could go with the options right below.\nOption 1 (my favorite) This option enables you to load compose theme as a hugo module. First things first, ensure you have go binary installed on your machine.\n1git clone https://github.com/onweru/compose/ 2cd compose/exampleSite/ 3hugo server To pull in theme updates, run hugo mod get -u ./... from the theme folder. If unsure, learn how to update hugo modules\nThe exampleSite uses the theme as a hugo module by default.\nIf you choose Option 2 or Option 3 below, ensure you edit these lines in the config.toml file as advised on the comments. Else, you will not be able to pull theme updates.\nOption 2 (recommended) Generate a new Hugo site and add this theme as a Git submodule inside your themes folder:\n1hugo new site yourSiteName 2cd yourSiteName 3git init 4git submodule add https://github.com/onweru/compose/ themes/compose 5cp -a themes/compose/exampleSite/* . Then run\n1hugo server Hurray!\nOption 3 (Great for testing quickly) You can run your site directly from the exampleSite. To do so, use the following commands:\n1git clone https://github.com/onweru/compose/ 2cd compose/exampleSite/ 3hugo server --themesDir ../.. Although, option 3 is great for quick testing, it is somewhat problematic when you want to update your theme. You would need to be careful not to overwrite your changes. Once set, jump over to the config.toml file and start configuring your site.\n","link":"https://example.com/installations/install-theme/","section":"installations","title":"Install theme"},{"body":"Welcome to the Compose theme user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Compose's blocks and templates.\nGet started now ","link":"https://example.com/installations/","section":"installations","title":"Installations"},{"body":"In this book of the course, you will be working on four projects.\nHer Majesty, The Queen is the first project where you learn how to use the debugger tools in Visual Studio Code and you practice the basic syntax of JavaScript. Sequina's Surf Shop is a project where you are given code to run that has errors already in it. You will use your debugger to find, understand, and fix those errors. ","link":"https://example.com/debugging/projects/","section":"debugging","title":"Projects"},{"body":"Do you prefer managing your site using a CMS? Or would you like to make it easier for someone (a non-techie, perhaps) in your team to make edits easily? If interested, follow along. Else, skip to the next section\nLet's sync your site with forestry CMS.\nPrerequisites !! Obviously you ought to have a github account. This is where your website source will live. Basically, forestry will read from github and write (commmit) to your github repo.\nGitlab or bitbucket will work too. Just check their implementation here. Happy fishing. Requirement 1 : A Forestry account Jump over to forestry and sign up for an account. Consider signing up using your github account. That way, you don't have to deal with passwords.\nRequirement 2: A Netlify account (optional) If you intend to host with something other than Netlify e.g github pages, please scroll on. Hosting with Netlify is a lot of fun though; I highly recommend it.\nStep 1 : Fork or Clone Compse theme First we will fork this theme's template.\nStep 2 : Add your repository in Forestry The exampleSite already comes with prefilled default forestry settings. If you set up your site using option 2, look for a file .forestry/settings.yml and remove all exampleSite/ strings from it. Go to your forestry account and click on import your site now.\nChoose hugo github or gitlab. wherever your repo is at. Select your repo ","link":"https://example.com/docs/compose/use-forestry-cms/","section":"docs","title":"Use forestry CMS"},{"body":"Do you prefer managing your site using a CMS? Or would you like to make it easier for someone (a non-techie, perhaps) in your team to make edits easily? If interested, follow along. Else, skip to the next section\nLet's sync your site with forestry CMS.\nPrerequisites !! Obviously you ought to have a github account. This is where your website source will live. Basically, forestry will read from github and write (commmit) to your github repo.\nGitlab or bitbucket will work too. Just check their implementation here. Happy fishing. Requirement 1 : A Forestry account Jump over to forestry and sign up for an account. Consider signing up using your github account. That way, you don't have to deal with passwords.\nRequirement 2: A Netlify account (optional) If you intend to host with something other than Netlify e.g github pages, please scroll on. Hosting with Netlify is a lot of fun though; I highly recommend it.\nStep 1 : Fork or Clone Compse theme First we will fork this theme's template.\nStep 2 : Add your repository in Forestry The exampleSite already comes with prefilled default forestry settings. If you set up your site using option 2, look for a file .forestry/settings.yml and remove all exampleSite/ strings from it. Go to your forestry account and click on import your site now.\nChoose hugo github or gitlab. wherever your repo is at. Select your repo ","link":"https://example.com/installations/use-forestry-cms/","section":"installations","title":"Use forestry CMS"},{"body":" In this project, you learn how to use the debugger tools in Visual Studio Code and you will practice the basic syntax of JavaScript.\nFunctions Conditional logic with if statements Iterating arrays for for..of loops graph TB A[Iterate Queens] --\u003e|Each queen...| B[Iterate Tributes] B --\u003e C{Is tribute for me?} C --\u003e|Yes| D[Display tribute message] C --\u003e|No| E[Look at next item] Start the Project\n","link":"https://example.com/debugging/projects/queen/","section":"debugging","title":"👸🏽 Her Majesty, The Queen"},{"body":"This theme is primarily meant for documentation.\nDocumentation By default, the theme will look for all your documentation content within the docs directory.\nHowever, if you would like to have your docs content across multiple directories, please list those directories inside config/_default/params.toml under docSections like so:\n... docSections = [\u0026#34;docs\u0026#34;, \u0026#34;tutorials\u0026#34;] ... Unlike other regular pages, the documentation pages will have a left sidebar. This sidebar will list links to all the pages in the documentation pages. Beneath each link, there will be a collapsible list of table of contents' links. These nested lists will unfold automatically on the active/current page.\nHome Page At the root level there's an _index.md page which is the homepage. Feel free to edit it as you like.\nOther pages You can also add as many regular pages as you like e.g about.md, contact.md...\nTake advantage of shortcodes to customize the layouts of these pages and any other.\nDoes this theme support blogging function? Currently, no.\n","link":"https://example.com/docs/compose/organize-content/","section":"docs","title":"Content organization"},{"body":"This theme is primarily meant for documentation.\nDocumentation By default, the theme will look for all your documentation content within the docs directory.\nHowever, if you would like to have your docs content across multiple directories, please list those directories inside config/_default/params.toml under docSections like so:\n... docSections = [\u0026#34;docs\u0026#34;, \u0026#34;tutorials\u0026#34;] ... Unlike other regular pages, the documentation pages will have a left sidebar. This sidebar will list links to all the pages in the documentation pages. Beneath each link, there will be a collapsible list of table of contents' links. These nested lists will unfold automatically on the active/current page.\nHome Page At the root level there's an _index.md page which is the homepage. Feel free to edit it as you like.\nOther pages You can also add as many regular pages as you like e.g about.md, contact.md...\nTake advantage of shortcodes to customize the layouts of these pages and any other.\nDoes this theme support blogging function? Currently, no.\n","link":"https://example.com/installations/organize-content/","section":"installations","title":"Content organization"},{"body":"Functions are the heart and soul of JavaScript developers. Everything that a modern application does is done in a function. An application can have hundreds, possibly thousands, of tasks that it must perform to solve a problem or provide a service to humans. Each one of those tasks is in a function.\nYou can think of a function as a container for code that completes a specific task.\nFunctions are the first major hurdle of learning software development. One of the main reasons is that you need to understand the difference between a function definition and running the function.\nIt is not sequential, which is how most human consume and understand text and instructions. The key to understanding is seeing them used in many different contexts.\nBeginners often ask questions like the following.\n\u0026quot;How many possible functions are there? Can I just memorize them all?\n\u0026quot;When do I need to write a function?\nThe answer to the first question is that it is the wrong question - because there are an infinite variety of functions. The reason for this is the answer to the second question. You write functions when you need some code to run to help solve your problem.\nThe key is understanding the problem, and then knowing the algorithm to solve it before you write any code.\nAnatomy of a Function Think of functions like minions that work for you. Each minion is designated a specific task that makes up your life.\nBuy groceries Pay bills Prepare meals Do math stuff when you don't want to (which, if we're being honest, is most of the time) Take the car to the repair shop Functions for Beginners Many students in the past have found the JavaScript Functions: Explain Like I'm Five article a helpful resource to understand the basics. Read it now. Read it tomorrow. Keep coming back to this entire chapter over and over again to keep reinforcing your vocabulary and basic concepts.\nIt's difficult to express how critically important it is for you to understand functions before you try any further concepts in this course like events, asynchronous code, modules, forms, and component-based applications. Functions are the foundation of all of those concepts.\n","link":"https://example.com/debugging/projects/queen/functions/","section":"debugging","title":"Functions Refresh"},{"body":"Instead of writing all your site pages from scratch, Hugo lets you define and use shortcodes.\nWhy shortcodes? While markdown is sufficient to produce simple pages, it's insufficient where complex page structures are needed. Thusly, whenever we need special styling, shortcodes compliment the shortcomings of markdown.\nThis way, you can side step complex html and css boilerplate in your content files.\nSometimes, the shortcode will wrap content, sometimes it won't. When content is wrapped, a closing shortcode tag is needed. Please see the link I provided above and the markdown files for examples. You'll get the gist pretty quickly.\nI've setup the following shortcodes:\nBlock Takes positional modifiers\nExample\n1... 2 {{\u0026lt; block \u0026#34;modifiers\u0026#34; \u0026gt;}} 3 \u0026lt;!-- Nest columns or content --\u0026gt; 4 {{\u0026lt; /block \u0026gt;}} 5... Column It takes positional parameters\nExample\n1 {{\u0026lt; column \u0026#34;mt-2 mb-2\u0026#34; \u0026gt;}} 2 \u0026lt;!-- applied margin top and margin bottom modifiers --\u0026gt; 3 {{\u0026lt; /column \u0026gt;}} Youtube Video This allows you to embed a youtube video in you content. You would achieve that using a positional parameter (needs no name )parameter, like so:\nSyntax\n1 {{\u0026lt; youtube \u0026#34;25QyCxVkXwQ\u0026#34; \u0026gt;}} 2 \u0026lt;!-- Use the youtube video id --\u0026gt; Result\nOR\nSyntax\n1\u0026lt;!-- or use full url --\u0026gt; 2{{\u0026lt; youtube \u0026#34;https://www.youtube.com/watch?v=MmG2ah5Df4g\u0026#34; \u0026gt;}} Result\nButton This adds a styled link (styled like a button). It takes two no-optional parameters:\nPARAMETER PURPOSE OPTIONAL label button text no url button link no modifier styling classes yes Example\n1 {{\u0026lt; button \u0026#34;/\u0026#34; \u0026#34;doe nu mee\u0026#34; \u0026gt;}} Picture You want to use darkmode images when darkmode is enabled on a device and a regular image on lightmode? It takes 3 positional parameter\nStore these images in the static/images directory.\nSyntax\n1... 2{{\u0026lt; picture \u0026#34;lightModeImage.png\u0026#34; \u0026#34;darkModeImage.png\u0026#34; \u0026#34;Image alt text\u0026#34; \u0026gt;}} 3... Result\nGallery Include inline galleries within your articles. These galleries can contain N number of images. It takes 2 positional parameters.\nThe 1st parameter is required. It's a comma-separated list (,) of your images' paths.\nThe 2nd parameter is optional. It's a double-collon-separated list (::) of your images' alt/description/captions text. It's always a good SEO practice to include alt text for your images.\nSyntax\n1... 2{{\u0026lt; gallery \u0026#34;images/painting.jpg,images/scribble.jpg,images/painting.jpg\u0026#34; \u0026#34;Gallery Image 1::gallery image 2::gallery image 1 copy\u0026#34; \u0026gt;}} 3... For legibility, you may include a space after the delimiters , \u0026amp; ::\nResult\nTip Use this short if you want to publish informational tooltips that look like:\nThis tooltips may take either of the following forms:\nSyntax\n1{{\u0026lt; tip \u0026gt;}} 2Something of __interest__ you want to highlight 3{{\u0026lt; /tip \u0026gt;}} Result\nSomething of interest you want to highlight OR\nSyntax\n1{{\u0026lt; tip \u0026#34;warning\u0026#34; \u0026gt;}} 2Something of __interest__ the user should be careful about 3{{\u0026lt; /tip \u0026gt;}} Result\nSomething of interest the user should be careful about ","link":"https://example.com/docs/compose/shortcodes/","section":"docs","title":"Shortcodes"},{"body":"Instead of writing all your site pages from scratch, Hugo lets you define and use shortcodes.\nWhy shortcodes? While markdown is sufficient to produce simple pages, it's insufficient where complex page structures are needed. Thusly, whenever we need special styling, shortcodes compliment the shortcomings of markdown.\nThis way, you can side step complex html and css boilerplate in your content files.\nSometimes, the shortcode will wrap content, sometimes it won't. When content is wrapped, a closing shortcode tag is needed. Please see the link I provided above and the markdown files for examples. You'll get the gist pretty quickly.\nI've setup the following shortcodes:\nBlock Takes positional modifiers\nExample\n1... 2 {{\u0026lt; block \u0026#34;modifiers\u0026#34; \u0026gt;}} 3 \u0026lt;!-- Nest columns or content --\u0026gt; 4 {{\u0026lt; /block \u0026gt;}} 5... Column It takes positional parameters\nExample\n1 {{\u0026lt; column \u0026#34;mt-2 mb-2\u0026#34; \u0026gt;}} 2 \u0026lt;!-- applied margin top and margin bottom modifiers --\u0026gt; 3 {{\u0026lt; /column \u0026gt;}} Youtube Video This allows you to embed a youtube video in you content. You would achieve that using a positional parameter (needs no name )parameter, like so:\nSyntax\n1 {{\u0026lt; youtube \u0026#34;25QyCxVkXwQ\u0026#34; \u0026gt;}} 2 \u0026lt;!-- Use the youtube video id --\u0026gt; Result\nOR\nSyntax\n1\u0026lt;!-- or use full url --\u0026gt; 2{{\u0026lt; youtube \u0026#34;https://www.youtube.com/watch?v=MmG2ah5Df4g\u0026#34; \u0026gt;}} Result\nButton This adds a styled link (styled like a button). It takes two no-optional parameters:\nPARAMETER PURPOSE OPTIONAL label button text no url button link no modifier styling classes yes Example\n1 {{\u0026lt; button \u0026#34;/\u0026#34; \u0026#34;doe nu mee\u0026#34; \u0026gt;}} Picture You want to use darkmode images when darkmode is enabled on a device and a regular image on lightmode? It takes 3 positional parameter\nStore these images in the static/images directory.\nSyntax\n1... 2{{\u0026lt; picture \u0026#34;lightModeImage.png\u0026#34; \u0026#34;darkModeImage.png\u0026#34; \u0026#34;Image alt text\u0026#34; \u0026gt;}} 3... Result\nGallery Include inline galleries within your articles. These galleries can contain N number of images. It takes 2 positional parameters.\nThe 1st parameter is required. It's a comma-separated list (,) of your images' paths.\nThe 2nd parameter is optional. It's a double-collon-separated list (::) of your images' alt/description/captions text. It's always a good SEO practice to include alt text for your images.\nSyntax\n1... 2{{\u0026lt; gallery \u0026#34;images/painting.jpg,images/scribble.jpg,images/painting.jpg\u0026#34; \u0026#34;Gallery Image 1::gallery image 2::gallery image 1 copy\u0026#34; \u0026gt;}} 3... For legibility, you may include a space after the delimiters , \u0026amp; ::\nResult\nTip Use this short if you want to publish informational tooltips that look like:\nThis tooltips may take either of the following forms:\nSyntax\n1{{\u0026lt; tip \u0026gt;}} 2Something of __interest__ you want to highlight 3{{\u0026lt; /tip \u0026gt;}} Result\nSomething of interest you want to highlight OR\nSyntax\n1{{\u0026lt; tip \u0026#34;warning\u0026#34; \u0026gt;}} 2Something of __interest__ the user should be careful about 3{{\u0026lt; /tip \u0026gt;}} Result\nSomething of interest the user should be careful about ","link":"https://example.com/installations/shortcodes/","section":"installations","title":"Shortcodes"},{"body":"Learning Objectives and Competencies At the end of this chapter you should be able to...\nDescribe the purpose of a function in software Identify a parameter in a function definition Describe the purpose of a parameter Identify where a function in invoked Identify an argument Describe what purpose an argument serves Describe what a function returns Setup In your terminal, run the following commands. These create a directory, and a file in that directory for the code you will write in this chapter.\n1cd ~/workspace 2mkdir majesty 3cd majesty 4touch main.js 5code . First Function Here is an example of a function with a parameter. A function can be invoked as many times as needed. If there is a parameter defined, then a value (a.k.a argument) must be provided when the function runs.\nOpen the main.js file in Visual Studio Code and paste the following function into it.\n1/* 2 Define a function with a single parameter. When the function 3 is invoked, an argument is required. 4*/ 5const hailTheQueen = (nameString) =\u0026gt; { 6 return `Hail Her Majesty, ${nameString}.` // This function returns a string 7} This is a task that you can execute later. It doesn't execute when you define it.\nInvoking a Function Now that you have a function defined, you can invoke it and pass a string to it as an argument. In this invocation, the argument is the string of \u0026quot;Athena Perez\u0026quot;.\nCopy pasta the follow code into the main.js file below the function definition.\n1const athena = hailTheQueen(\u0026#34;Athena Perez\u0026#34;) // Argument value is \u0026#34;Athena Perez\u0026#34; 2console.log(athena) Next, go to your terminal and run the following command.\n1node main.js And you should see the following string in the output.\n1\u0026#34;Hail Her Majesty, Athena Perez.\u0026#34; Another Queen Copy pasta the follow code into the main.js file below the function definition. In this invocation, the argument is the string of \u0026quot;Charisse Ford\u0026quot;.\n1const charisse = hailTheQueen(\u0026#34;Charisse Ford\u0026#34;) // Argument value is \u0026#34;Charisse Ford\u0026#34; 2console.log(charisse) 3 4const jenna = hailTheQueen(\u0026#34;Jenna Solis\u0026#34;) // Argument value is \u0026#34;Jenna Solis\u0026#34; 5console.log(jenna) Run the code again in this terminal and you will see the output of the function being invoked three times.\n1\u0026#34;Hail Her Majesty, Athena Perez.\u0026#34; 2\u0026#34;Hail Her Majesty, Charisse Ford.\u0026#34; 3\u0026#34;Hail Her Majesty, Jenna Solis.\u0026#34; The Queens in Your Life Now invoke the function a couple more times, passing in arguments representing the queens in your life. Make sure you console.log() the string that the function returns.\nMake sure you run the following command in your terminal to execute your code.\n1node main.js ","link":"https://example.com/debugging/projects/queen/majesty_functions/","section":"debugging","title":"Queen Functions"},{"body":"Firstly, ensure you have these lines inside your config.toml file\n1[outputs] 2 home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;,\u0026#34;JSON\u0026#34;] Compose implements fuse.js to enable search functionality. At the time of this writing, search on these theme takes either of this forms:\n1. Passive search This occurs only when the user loads the search page i.e /search/. They can directly navigate to that url. Alternatively, the user can type you search query on the search field and click enter. They will be redirected to the search page which will contain matched results if any.\n2. Live search This behaviour will be obvious as the user types a search query on the search field. All valid search queries, will yield a list of quick links or a simple no matches found. Else, the user will be prompted to continue typing.\nPlease note that the results under quick links will be a truncated list of the most relevant results. Only a maximum of 8 items will be returned. This number is pragmatic at best if not arbitrary. On the search page, the number is set to 12.\nNote that live search on the search page will behave differently than on the other pages. Nonetheles, the pages apply the same live search principle.\nHitting enter while typing on the search page will be moot as that page’s content will live update as you type in the search word / phrase.\nCustomize search feedback labels Use the i18n files to do so.\nWhat is a valid search query A valid search query must be long enough. If the search query can be cast as a float, then it only need contain one or more characters.\nElse the search query must be at least 2 characters long.\n","link":"https://example.com/docs/compose/search/","section":"docs","title":"Search Function"},{"body":"Firstly, ensure you have these lines inside your config.toml file\n1[outputs] 2 home = [\u0026#34;HTML\u0026#34;, \u0026#34;RSS\u0026#34;,\u0026#34;JSON\u0026#34;] Compose implements fuse.js to enable search functionality. At the time of this writing, search on these theme takes either of this forms:\n1. Passive search This occurs only when the user loads the search page i.e /search/. They can directly navigate to that url. Alternatively, the user can type you search query on the search field and click enter. They will be redirected to the search page which will contain matched results if any.\n2. Live search This behaviour will be obvious as the user types a search query on the search field. All valid search queries, will yield a list of quick links or a simple no matches found. Else, the user will be prompted to continue typing.\nPlease note that the results under quick links will be a truncated list of the most relevant results. Only a maximum of 8 items will be returned. This number is pragmatic at best if not arbitrary. On the search page, the number is set to 12.\nNote that live search on the search page will behave differently than on the other pages. Nonetheles, the pages apply the same live search principle.\nHitting enter while typing on the search page will be moot as that page’s content will live update as you type in the search word / phrase.\nCustomize search feedback labels Use the i18n files to do so.\nWhat is a valid search query A valid search query must be long enough. If the search query can be cast as a float, then it only need contain one or more characters.\nElse the search query must be at least 2 characters long.\n","link":"https://example.com/installations/search/","section":"installations","title":"Search Function"},{"body":"In this chapter, you are going to see how to run a tool called the debugger which allows you to watch, step by step, how JavaScript executes your code.\nLearning Objectives and Competencies At the end of this chapter you should be able to...\nAccess the Run and Debug panel of Visual Studio Code Step over your code as it executes Evaluate the value of variables while stepping through your code Identify where the output is displayed while using the debugger Using the Debugger Tool Watch the following video to learn how to use Visual Studio Code to execute your code, evaluate values, and use the debugger toolbar.\n","link":"https://example.com/debugging/projects/queen/debugger_intro/","section":"debugging","title":"Watch Your Code Run"},{"body":"Your whole life, you've been trained to make mistakes disappear as quickly as possible. Part of this program is to begin the process of re-training your brain.\nYour future teammates will only benefit if you understand why the error is happening, not just that you fixed it. Then you can explain to them why it happened so that future errors of the same kind can be avoided.\nLogical Errors Copy pasta the following code into your main.js module and run the debugger again. Make sure you don't have any breakpoints set.\n1const ramona = hailTheQueen() 2console.log(ramona) You will notice the following output in the Debug Console.\n1Hail Her Majesty, undefined. Do you understand why you see the value of undefined at the end of the sentence instead of queen's name? It is easy to fix the error, but anyone can do that. Can you explain it, though?\nHere is the correct vocabulary.\nThe value of undefined is at the end of the string that was returned by the function because no argument was provided when the function was invoked. Therefore, the nameString parameter retained its default value of undefined and that value was placed at the end of the string template.\nThis is called a logical error. That means that all of your syntax was valid, so JavaScript executed all of it without any problems. However, the output was invalid.\nThese are the hardest errors to understand and resolve because JavaScript can't tell you what you did wrong. As far as it is concerned, you did not violate any syntax rules so your code is good.\nGo ahead and fix the logical error by providing a valid argument.\nSyntactical Errors When you make a mistake with the syntax rules of the language itself, JavaScript can, and will tell you exactly where you messed up, and how. Unfortuntely, as a beginner, sometimes the error message can be as confusing as the error itself.\nTime to make a common, beginner syntactical error.\nCopy pasta the following code at the bottom of the main.js module, and then run the debugger.\n1const monica = hailTheQuen(\u0026#34;Monica Dinglehopper\u0026#34;) 2console.log(monica) Now watch the following video for an overview of how to read and understand a JavaScript syntax error.\n","link":"https://example.com/debugging/projects/queen/bug_queen/","section":"debugging","title":"Bug Queen"},{"body":"Mermaid is library that helps you generate diagrams, flowcharts, and piecharts from text in a similar manner as markdown.\nWith compose theme, you can use mermaid using a custom shortcode as follows:\nSequence Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2sequenceDiagram 3 participant Alice 4 participant Bob 5 Alice-\u0026gt;\u0026gt;John: Hello John, how are you? 6 loop Healthcheck 7 John-\u0026gt;\u0026gt;John: Fight against hypochondria 8 end 9 Note right of John: Rational thoughts\u0026lt;br/\u0026gt;prevail... 10 John--\u0026gt;\u0026gt;Alice: Great! 11 John-\u0026gt;\u0026gt;Bob: How about you? 12 Bob--\u0026gt;\u0026gt;John: Jolly good! 13{{\u0026lt; /mermaid \u0026gt;}} Result\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughtsprevail... John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Flow Charts Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2flowchart TB 3 c1--\u0026gt;a2 4 subgraph one 5 a1--\u0026gt;a2 6 end 7 subgraph two 8 b1--\u0026gt;b2 9 end 10 subgraph three 11 c1--\u0026gt;c2 12 end 13 one --\u0026gt; two 14 three --\u0026gt; two 15 two --\u0026gt; c2 16{{\u0026lt; /mermaid \u0026gt;}} Result\nflowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end one --\u003e two three --\u003e two two --\u003e c2 Graphs Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph TB 3 sq[Square shape] --\u0026gt; ci((Circle shape)) 4 5 subgraph A 6 od\u0026gt;Odd shape]-- Two line\u0026lt;br/\u0026gt;edge comment --\u0026gt; ro 7 di{Diamond with \u0026lt;br/\u0026gt; line break} -.-\u0026gt; ro(Rounded\u0026lt;br\u0026gt;square\u0026lt;br\u0026gt;shape) 8 di==\u0026gt;ro2(Rounded square shape) 9 end 10 11 %% Notice that no text in shape are added here instead that is appended further down 12 e --\u0026gt; od3\u0026gt;Really long text with linebreak\u0026lt;br\u0026gt;in an Odd shape] 13 14 %% Comments after double percent signs 15 e((Inner / circle\u0026lt;br\u0026gt;and some odd \u0026lt;br\u0026gt;special characters)) --\u0026gt; f(,.?!+-*ز) 16 17 cyr[Cyrillic]--\u0026gt;cyr2((Circle shape Начало)); 18 19 classDef green fill:#9f6,stroke:#333,stroke-width:2px; 20 classDef orange fill:#f96,stroke:#333,stroke-width:4px; 21 class sq,e green 22 class di orange 23{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph TB sq[Square shape] --\u003e ci((Circle shape)) subgraph A od\u003eOdd shape]-- Two lineedge comment --\u003e ro di{Diamond with line break} -.-\u003e ro(Rounded\nsquare\nshape) di==\u003ero2(Rounded square shape) end %% Notice that no text in shape are added here instead that is appended further down e --\u003e od3\u003eReally long text with linebreak\nin an Odd shape] %% Comments after double percent signs e((Inner / circle\nand some odd special characters)) --\u003e f(,.?!+-*ز) cyr[Cyrillic]--\u003ecyr2((Circle shape Начало)); classDef green fill:#9f6,stroke:#333,stroke-width:2px; classDef orange fill:#f96,stroke:#333,stroke-width:4px; class sq,e green class di orange Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph LR 3 A[Hard edge] --\u0026gt;|Link text| B(Round edge) 4 B --\u0026gt; C{Decision} 5 C --\u0026gt;|One| D[Result one] 6 C --\u0026gt;|Two| E[Result two] 7{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph LR A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Class Diagram classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } State Diagram stateDiagram-v2 [*] --\u003e Active state Active { [*] --\u003e NumLockOff NumLockOff --\u003e NumLockOn : EvNumLockPressed NumLockOn --\u003e NumLockOff : EvNumLockPressed -- [*] --\u003e CapsLockOff CapsLockOff --\u003e CapsLockOn : EvCapsLockPressed CapsLockOn --\u003e CapsLockOff : EvCapsLockPressed -- [*] --\u003e ScrollLockOff ScrollLockOff --\u003e ScrollLockOn : EvScrollLockPressed ScrollLockOn --\u003e ScrollLockOff : EvScrollLockPressed } stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. Relationship Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2erDiagram 3 CUSTOMER ||--o{ ORDER : places 4 ORDER ||--|{ LINE-ITEM : contains 5 CUSTOMER }|..|{ DELIVERY-ADDRESS : uses 6{{\u0026lt; /mermaid \u0026gt;}} Result\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses User Journey Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2journey 3 title My working day 4 section Go to work 5 Make tea: 5: Me 6 Go upstairs: 3: Me 7 Do work: 1: Me, Cat 8 section Go home 9 Go downstairs: 5: Me 10 Sit down: 5: Me 11{{\u0026lt; /mermaid \u0026gt;}} Result\njourney title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Gantt Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2gantt 3 dateFormat YYYY-MM-DD 4 title Adding GANTT diagram functionality to mermaid 5 excludes weekends 6 %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\u0026#34;sunday\u0026#34;) or \u0026#34;weekends\u0026#34;, but not the word \u0026#34;weekdays\u0026#34;.) 7 8 section A section 9 Completed task :done, des1, 2014-01-06,2014-01-08 10 Active task :active, des2, 2014-01-09, 3d 11 Future task : des3, after des2, 5d 12 Future task2 : des4, after des3, 5d 13 14 section Critical tasks 15 Completed task in the critical line :crit, done, 2014-01-06,24h 16 Implement parser and jison :crit, done, after des1, 2d 17 Create tests for parser :crit, active, 3d 18 Future task in critical line :crit, 5d 19 Create tests for renderer :2d 20 Add to mermaid :1d 21 22 section Documentation 23 Describe gantt syntax :active, a1, after des1, 3d 24 Add gantt diagram to demo page :after a1 , 20h 25 Add another diagram to demo page :doc1, after a1 , 48h 26 27 section Last section 28 Describe gantt syntax :after doc1, 3d 29 Add gantt diagram to demo page :20h 30 Add another diagram to demo page :48h 31{{\u0026lt; /mermaid \u0026gt;}} Result\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h Pie Chart 1{{\u0026lt; mermaid \u0026gt;}} 2pie 3 title Key elements in Product X 4 \u0026#34;Calcium\u0026#34; : 42.96 5 \u0026#34;Potassium\u0026#34; : 50.05 6 \u0026#34;Magnesium\u0026#34; : 10.01 7 \u0026#34;Iron\u0026#34; : 5 8{{\u0026lt; /mermaid \u0026gt;}} Result\npie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 ","link":"https://example.com/docs/compose/mermaid/","section":"docs","title":"Mermaid"},{"body":"Mermaid is library that helps you generate diagrams, flowcharts, and piecharts from text in a similar manner as markdown.\nWith compose theme, you can use mermaid using a custom shortcode as follows:\nSequence Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2sequenceDiagram 3 participant Alice 4 participant Bob 5 Alice-\u0026gt;\u0026gt;John: Hello John, how are you? 6 loop Healthcheck 7 John-\u0026gt;\u0026gt;John: Fight against hypochondria 8 end 9 Note right of John: Rational thoughts\u0026lt;br/\u0026gt;prevail... 10 John--\u0026gt;\u0026gt;Alice: Great! 11 John-\u0026gt;\u0026gt;Bob: How about you? 12 Bob--\u0026gt;\u0026gt;John: Jolly good! 13{{\u0026lt; /mermaid \u0026gt;}} Result\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughtsprevail... John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Flow Charts Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2flowchart TB 3 c1--\u0026gt;a2 4 subgraph one 5 a1--\u0026gt;a2 6 end 7 subgraph two 8 b1--\u0026gt;b2 9 end 10 subgraph three 11 c1--\u0026gt;c2 12 end 13 one --\u0026gt; two 14 three --\u0026gt; two 15 two --\u0026gt; c2 16{{\u0026lt; /mermaid \u0026gt;}} Result\nflowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end one --\u003e two three --\u003e two two --\u003e c2 Graphs Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph TB 3 sq[Square shape] --\u0026gt; ci((Circle shape)) 4 5 subgraph A 6 od\u0026gt;Odd shape]-- Two line\u0026lt;br/\u0026gt;edge comment --\u0026gt; ro 7 di{Diamond with \u0026lt;br/\u0026gt; line break} -.-\u0026gt; ro(Rounded\u0026lt;br\u0026gt;square\u0026lt;br\u0026gt;shape) 8 di==\u0026gt;ro2(Rounded square shape) 9 end 10 11 %% Notice that no text in shape are added here instead that is appended further down 12 e --\u0026gt; od3\u0026gt;Really long text with linebreak\u0026lt;br\u0026gt;in an Odd shape] 13 14 %% Comments after double percent signs 15 e((Inner / circle\u0026lt;br\u0026gt;and some odd \u0026lt;br\u0026gt;special characters)) --\u0026gt; f(,.?!+-*ز) 16 17 cyr[Cyrillic]--\u0026gt;cyr2((Circle shape Начало)); 18 19 classDef green fill:#9f6,stroke:#333,stroke-width:2px; 20 classDef orange fill:#f96,stroke:#333,stroke-width:4px; 21 class sq,e green 22 class di orange 23{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph TB sq[Square shape] --\u003e ci((Circle shape)) subgraph A od\u003eOdd shape]-- Two lineedge comment --\u003e ro di{Diamond with line break} -.-\u003e ro(Rounded\nsquare\nshape) di==\u003ero2(Rounded square shape) end %% Notice that no text in shape are added here instead that is appended further down e --\u003e od3\u003eReally long text with linebreak\nin an Odd shape] %% Comments after double percent signs e((Inner / circle\nand some odd special characters)) --\u003e f(,.?!+-*ز) cyr[Cyrillic]--\u003ecyr2((Circle shape Начало)); classDef green fill:#9f6,stroke:#333,stroke-width:2px; classDef orange fill:#f96,stroke:#333,stroke-width:4px; class sq,e green class di orange Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph LR 3 A[Hard edge] --\u0026gt;|Link text| B(Round edge) 4 B --\u0026gt; C{Decision} 5 C --\u0026gt;|One| D[Result one] 6 C --\u0026gt;|Two| E[Result two] 7{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph LR A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Class Diagram classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } State Diagram stateDiagram-v2 [*] --\u003e Active state Active { [*] --\u003e NumLockOff NumLockOff --\u003e NumLockOn : EvNumLockPressed NumLockOn --\u003e NumLockOff : EvNumLockPressed -- [*] --\u003e CapsLockOff CapsLockOff --\u003e CapsLockOn : EvCapsLockPressed CapsLockOn --\u003e CapsLockOff : EvCapsLockPressed -- [*] --\u003e ScrollLockOff ScrollLockOff --\u003e ScrollLockOn : EvScrollLockPressed ScrollLockOn --\u003e ScrollLockOff : EvScrollLockPressed } stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. Relationship Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2erDiagram 3 CUSTOMER ||--o{ ORDER : places 4 ORDER ||--|{ LINE-ITEM : contains 5 CUSTOMER }|..|{ DELIVERY-ADDRESS : uses 6{{\u0026lt; /mermaid \u0026gt;}} Result\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses User Journey Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2journey 3 title My working day 4 section Go to work 5 Make tea: 5: Me 6 Go upstairs: 3: Me 7 Do work: 1: Me, Cat 8 section Go home 9 Go downstairs: 5: Me 10 Sit down: 5: Me 11{{\u0026lt; /mermaid \u0026gt;}} Result\njourney title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Gantt Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2gantt 3 dateFormat YYYY-MM-DD 4 title Adding GANTT diagram functionality to mermaid 5 excludes weekends 6 %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\u0026#34;sunday\u0026#34;) or \u0026#34;weekends\u0026#34;, but not the word \u0026#34;weekdays\u0026#34;.) 7 8 section A section 9 Completed task :done, des1, 2014-01-06,2014-01-08 10 Active task :active, des2, 2014-01-09, 3d 11 Future task : des3, after des2, 5d 12 Future task2 : des4, after des3, 5d 13 14 section Critical tasks 15 Completed task in the critical line :crit, done, 2014-01-06,24h 16 Implement parser and jison :crit, done, after des1, 2d 17 Create tests for parser :crit, active, 3d 18 Future task in critical line :crit, 5d 19 Create tests for renderer :2d 20 Add to mermaid :1d 21 22 section Documentation 23 Describe gantt syntax :active, a1, after des1, 3d 24 Add gantt diagram to demo page :after a1 , 20h 25 Add another diagram to demo page :doc1, after a1 , 48h 26 27 section Last section 28 Describe gantt syntax :after doc1, 3d 29 Add gantt diagram to demo page :20h 30 Add another diagram to demo page :48h 31{{\u0026lt; /mermaid \u0026gt;}} Result\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h Pie Chart 1{{\u0026lt; mermaid \u0026gt;}} 2pie 3 title Key elements in Product X 4 \u0026#34;Calcium\u0026#34; : 42.96 5 \u0026#34;Potassium\u0026#34; : 50.05 6 \u0026#34;Magnesium\u0026#34; : 10.01 7 \u0026#34;Iron\u0026#34; : 5 8{{\u0026lt; /mermaid \u0026gt;}} Result\npie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 ","link":"https://example.com/installations/mermaid/","section":"installations","title":"Mermaid"},{"body":"Using chart js library you can display data you have stored in a csv file as a pie chart, bar graph or doughnut chart.\nAt this point if you want to display data from a json or yaml file, you would need to convert it into csv first. Else the template will error out.\nOnce you have a csv file, you display the charts as follows:\nShow a pie, doughnut \u0026amp; bar chart at once Firstly define the data you want to display from the front matter:\n1# from front matter 2... 3[dataset1] # this key will in the chart shortcode 4 fileLink = \u0026#34;content/projects.csv\u0026#34; # path to where csv is stored 5 colors = [\u0026#34;#627c62\u0026#34;, \u0026#34;#11819b\u0026#34;, \u0026#34;#ef7f1a\u0026#34;, \u0026#34;#4e1154\u0026#34;] # chart colors 6 columnTitles = [\u0026#34;Section\u0026#34;, \u0026#34;Status\u0026#34;, \u0026#34;Author\u0026#34;] 7 charts = [\u0026#34;bar\u0026#34;, \u0026#34;doughnut\u0026#34;, \u0026#34;pie\u0026#34;, \u0026#34;table\u0026#34;] 8 baseChartOn = 3 # number of column the chart(s) and graph should be drawn from 9 piechart = true 10 doughnutchart = true 11 bargraph = true 12 title = \u0026#34;Projects\u0026#34; 13 table = true # show table listing the chart data 14 15// from page content 16... 17{{\u0026lt; grid \u0026#34; mt-2\u0026#34; \u0026gt;}} 18 {{\u0026lt; chart \u0026#34;dataset1\u0026#34; \u0026gt;}} 19{{\u0026lt; /grid \u0026gt;}} 20... Show Table at once Section Status Author project 6 alpha weru project 4 beta dan project 4 candidate dahl project y abandoned weru project 1 alpha weru project 4 beta ryan project 4 candidate dan project y abandoned weru project 11 alpha dahl project 4 beta dan project 4 candidate dan project A abandoned weru Firstly define the data you want to display from the front matter:\n1# from page front matter 2[dataset2] 3 fileLink = \u0026#34;content/themes.csv\u0026#34; # path to where csv is stored # this key will in the chart shortcode 4 colors = [\u0026#34;#627c62\u0026#34;, \u0026#34;#11819b\u0026#34;, \u0026#34;#ef7f1a\u0026#34;, \u0026#34;#4e1154\u0026#34;] # chart colors 5 columnTitles = [\u0026#34;Theme\u0026#34;, \u0026#34;Latest Version\u0026#34;, \u0026#34;Owner\u0026#34;] 6 title = \u0026#34;Hugo Themes\u0026#34; 7 baseChartOn = 2 # number of column the chart(s) and graph should be drawn from 8 piechart = false 9 doughnutchart = true 10 bargraph = true 11 table = false # show table listing the chart data Show only a pie and a doughnut chart 1// from page content 2... 3{{\u0026lt; grid \u0026#34; mt-2\u0026#34; \u0026gt;}} 4 {{\u0026lt; chart \u0026#34;dataset2\u0026#34; \u0026gt;}} 5{{\u0026lt; /grid \u0026gt;}} 6... Show table with filter Theme Latest Version Repo Owner clarity V.1 chipzoller compose V.1 weru swift V.2 weru newsroom V.1 weru Show table only Theme Latest Version Repo Owner clarity V.1 chipzoller compose V.1 weru swift V.2 weru newsroom V.1 weru ","link":"https://example.com/docs/compose/graphs-charts-tables/","section":"docs","title":"Graphs, charts \u0026 dynamic tables"},{"body":"Using chart js library you can display data you have stored in a csv file as a pie chart, bar graph or doughnut chart.\nAt this point if you want to display data from a json or yaml file, you would need to convert it into csv first. Else the template will error out.\nOnce you have a csv file, you display the charts as follows:\nShow a pie, doughnut \u0026amp; bar chart at once Firstly define the data you want to display from the front matter:\n1# from front matter 2... 3[dataset1] # this key will in the chart shortcode 4 fileLink = \u0026#34;content/projects.csv\u0026#34; # path to where csv is stored 5 colors = [\u0026#34;#627c62\u0026#34;, \u0026#34;#11819b\u0026#34;, \u0026#34;#ef7f1a\u0026#34;, \u0026#34;#4e1154\u0026#34;] # chart colors 6 columnTitles = [\u0026#34;Section\u0026#34;, \u0026#34;Status\u0026#34;, \u0026#34;Author\u0026#34;] 7 charts = [\u0026#34;bar\u0026#34;, \u0026#34;doughnut\u0026#34;, \u0026#34;pie\u0026#34;, \u0026#34;table\u0026#34;] 8 baseChartOn = 3 # number of column the chart(s) and graph should be drawn from 9 piechart = true 10 doughnutchart = true 11 bargraph = true 12 title = \u0026#34;Projects\u0026#34; 13 table = true # show table listing the chart data 14 15// from page content 16... 17{{\u0026lt; grid \u0026#34; mt-2\u0026#34; \u0026gt;}} 18 {{\u0026lt; chart \u0026#34;dataset1\u0026#34; \u0026gt;}} 19{{\u0026lt; /grid \u0026gt;}} 20... Show Table at once Section Status Author project 6 alpha weru project 4 beta dan project 4 candidate dahl project y abandoned weru project 1 alpha weru project 4 beta ryan project 4 candidate dan project y abandoned weru project 11 alpha dahl project 4 beta dan project 4 candidate dan project A abandoned weru Firstly define the data you want to display from the front matter:\n1# from page front matter 2[dataset2] 3 fileLink = \u0026#34;content/themes.csv\u0026#34; # path to where csv is stored # this key will in the chart shortcode 4 colors = [\u0026#34;#627c62\u0026#34;, \u0026#34;#11819b\u0026#34;, \u0026#34;#ef7f1a\u0026#34;, \u0026#34;#4e1154\u0026#34;] # chart colors 5 columnTitles = [\u0026#34;Theme\u0026#34;, \u0026#34;Latest Version\u0026#34;, \u0026#34;Owner\u0026#34;] 6 title = \u0026#34;Hugo Themes\u0026#34; 7 baseChartOn = 2 # number of column the chart(s) and graph should be drawn from 8 piechart = false 9 doughnutchart = true 10 bargraph = true 11 table = false # show table listing the chart data Show only a pie and a doughnut chart 1// from page content 2... 3{{\u0026lt; grid \u0026#34; mt-2\u0026#34; \u0026gt;}} 4 {{\u0026lt; chart \u0026#34;dataset2\u0026#34; \u0026gt;}} 5{{\u0026lt; /grid \u0026gt;}} 6... Show table with filter Theme Latest Version Repo Owner clarity V.1 chipzoller compose V.1 weru swift V.2 weru newsroom V.1 weru Show table only Theme Latest Version Repo Owner clarity V.1 chipzoller compose V.1 weru swift V.2 weru newsroom V.1 weru ","link":"https://example.com/installations/graphs-charts-tables/","section":"installations","title":"Graphs, charts \u0026 dynamic tables"},{"body":"In this chapter, you are going to define a new function that will perform the task of adding objects that represent each queen to an array. Thus, you will practice the syntax for arrays and objects that you were introduced to in the Foundations Course.\nLearning Objectives and Competencies At the end of this chapter you should be able to...\nCreate a JavaScript object Describe the key names, and corresponding data type of each key's value Add a new value to an existing array Describe array iteration syntax with correct vocabulary Setup Add the following line of code to the very top of the main.js, even before the current function definition.\n1const queens = [] This array, which starts off empty, will contain all of the queens. Each queen will be represented as an object. So far, you have only used strings for the queen's name, but in this chapter, the queen's name will be a property on an object.\nAnoint a Queen Your job is to write a function that will create an object that represents a queen. Once that object is created, you will use the .push() method to add the object to the queens array.\nEach queen will have two properties.\nid which will be a number that is a unique identifier for each queen. name which will be a string value of the queen's name Here is what the first queen object will look like when you are done.\n1{ 2 id: 1, 3 name: \u0026#34;Athena Perez\u0026#34; 4} The function will need to be given both the unique numerical identifier you want assigned to the queen, and the queen's name. This means that the function must have two parameters defined. The first parameter will capture the number value, and the second parameter will capture the string value.\nHere is some starter code. Paste this into your main.js module and immediately run it with the debugger. You will be told by JavaScript that there is a syntax error.\nRead the stack trace and determine exactly which line of code in your module has the error.\n1const queens = [] 2 3const createQueen = () =\u0026gt; { 4 const queenObject = { 5 id: , 6 name: 7 } 8 9 queens.push() 10} 11 12createQueen(1, \u0026#34;Trinity Terry\u0026#34;) Now try to implement the correct syntax in the function to make it work correctly. There are hints below if you get stuck.\nHint 1 - Parameters First define two parameters. You may pick your own variable names if you wish.\n1const createQueen = (queenId, queenName) =\u0026gt; { 2 const queenObject = { 3 id: , 4 name: 5 } 6 7 queens.push() 8} Hint 2 - Key Values Assign the value of the parameters to the appropriate keys on the object.\n1const createQueen = (queenId, queenName) =\u0026gt; { 2 const queenObject = { 3 id: queenId, 4 name: queenName 5 } 6 7 queens.push() 8} Hint 3 - Push Argument Push the value of the queenObject variable, which is an object into the array with the push() array method.\n1const createQueen = (queenId, queenName) =\u0026gt; { 2 const queenObject = { 3 id: queenId, 4 name: queenName 5 } 6 7 queens.push(queenObject) 8} Watch the Queens Being Created Now that you have the function working correctly. Invoke the function several times to create multiple queen objects in the array. Then set a breakpoint on the line of code where the function is invoked the very first time and run the debugger again.\nWatch the queen array get items added to it as you step over each line of code.\n","link":"https://example.com/debugging/projects/queen/colony/","section":"debugging","title":"Queen Colony"},{"body":"Shortcodes modifiers These modifiers are classes you can use with shortcodes to customize the look and feel of your layouts and components.\nGrid modifier space grid-2 2 columns grid-3 3 columns grid-4 4 columns Spacing modifier space mt-1 1.5rem top margin mt-2 3rem top margin mt-3 4.5rem top margin mt-4 6rem top margin use pt-1 ~ pt-4 for top padding\nmodifier space mb-1 1.5rem bottom margin mb-2 3rem bottom margin mb-3 4.5rem bottom margin mb-4 6rem bottom margin use pb-1 ~ pb-4 for bottom padding\nHow do I disable dark mode? Under params add enableDarkMode = false to your config.toml file. If your site is based on the exampleSite, the value is already included; you only need to uncomment it.\nThe user will still have the option to activate dark mode, if they so wish through the UI\nHow do I change the theme color? If the theme is a git submodule, you can copy the file assets/sass/_variables.sass from the theme into your own site. The location must be exactly the same as in the theme, so put it in YourFancySite/assets/sass/. You can then edit the file to customize the theme color in your site without having to modify the theme itself.\nHow can I change the address bar color on mobile devices? Just put the following line in the [params] section in your config.toml file (and of course change the color):\n1metaThemeColor = \u0026#34;#123456\u0026#34; How do I add custom styles, scripts, meta tags e.t.c Use hooks. Ideally, you should not override the them directly.\nInstead, you should duplicate these files at the root of you site directory.\nlayouts/partials/hooks/head.html layouts/partials/hooks/scripts.html The contents of the first file will be attached just before the \u0026lt;/head\u0026gt; tag.\nThe contents of the second file will be attached just before the \u0026lt;/body\u0026gt; tag.\nAlternatively, if you want to use the config.toml to track your custom styles or scripts, declare them as slices under [params] like so:\n1... 2[params] 3customCSS = [styleURL1, styleURL2 ...] 4customJS = [scriptURL1, scriptURL2 ... ] 5... I want to add custom SASS or JS Add custom SASS and JS via this custom SASS file and this custom JavaScript file.\n","link":"https://example.com/docs/compose/customize/","section":"docs","title":"Customize layouts \u0026 components"},{"body":"Shortcodes modifiers These modifiers are classes you can use with shortcodes to customize the look and feel of your layouts and components.\nGrid modifier space grid-2 2 columns grid-3 3 columns grid-4 4 columns Spacing modifier space mt-1 1.5rem top margin mt-2 3rem top margin mt-3 4.5rem top margin mt-4 6rem top margin use pt-1 ~ pt-4 for top padding\nmodifier space mb-1 1.5rem bottom margin mb-2 3rem bottom margin mb-3 4.5rem bottom margin mb-4 6rem bottom margin use pb-1 ~ pb-4 for bottom padding\nHow do I disable dark mode? Under params add enableDarkMode = false to your config.toml file. If your site is based on the exampleSite, the value is already included; you only need to uncomment it.\nThe user will still have the option to activate dark mode, if they so wish through the UI\nHow do I change the theme color? If the theme is a git submodule, you can copy the file assets/sass/_variables.sass from the theme into your own site. The location must be exactly the same as in the theme, so put it in YourFancySite/assets/sass/. You can then edit the file to customize the theme color in your site without having to modify the theme itself.\nHow can I change the address bar color on mobile devices? Just put the following line in the [params] section in your config.toml file (and of course change the color):\n1metaThemeColor = \u0026#34;#123456\u0026#34; How do I add custom styles, scripts, meta tags e.t.c Use hooks. Ideally, you should not override the them directly.\nInstead, you should duplicate these files at the root of you site directory.\nlayouts/partials/hooks/head.html layouts/partials/hooks/scripts.html The contents of the first file will be attached just before the \u0026lt;/head\u0026gt; tag.\nThe contents of the second file will be attached just before the \u0026lt;/body\u0026gt; tag.\nAlternatively, if you want to use the config.toml to track your custom styles or scripts, declare them as slices under [params] like so:\n1... 2[params] 3customCSS = [styleURL1, styleURL2 ...] 4customJS = [scriptURL1, scriptURL2 ... ] 5... I want to add custom SASS or JS Add custom SASS and JS via this custom SASS file and this custom JavaScript file.\n","link":"https://example.com/installations/customize/","section":"installations","title":"Customize layouts \u0026 components"},{"body":"In this chapter, you are going to iterate the queens array to hail each one.\nDefinition of iteration:\nTo iterate an array means to write code that starts at the first item in the array, then moves to each subsequent one until there are no more items in the array.\nLearning Objectives and Competencies At the end of this chapter you should be able to...\nWrite a for..of loop to iterate an array Describe the syntax of a for..of loop correctly Step through the code with the debugger and describe the values and scope of variables Remove Manual Hails You are going to automate the hailing of each queen in your array, so the first thing to do is remove all of the invocations of hailTheQueen() that you currently have.\nHail Each Queen Next, write a for..of loop to iterate the queens array. Visual Studio Code has a handy helper to write the basic syntax of the loop for you.\nType in forof in the editor, and then press your Tab key and you will have some starter code.\nThen replace the default variable names it provides with more appropriate variable names.\nThe first variable will store each queen object in the array, so queen or queenObject would be appropriate The second variable must be the one whose value is the array, so this must be queens The final step is to invoke the hailing function and pass the queen's name to it. This time the syntax will be different for the argument. You won't manually type in the queen's name, since it is already a property of each queen object.\nYou need to access the correct property on the object inside the parenthesis when the function is invoked. There is a hint below if you can't figure it out with your peers.\n1for (const queen of queens) { 2 3 const hailMessage = hailTheQueen() // What should be passed as an argument? 4 console.log(hailMessage) 5 6} The Answer 1const hailMessage = hailTheQueen(queen.name) Understand the Flow with the Debugger Before you move on to the next chapter, put a breakpoint on the very first line of code in the main.js module and step through each line of code and follow the flow of logic, and the values of your variables.\nThis is a top priority skill that you must have as a developer, so skipping this step is folly.\nWatch the following video for an overview of using the debugger for this version of your code.\n","link":"https://example.com/debugging/projects/queen/iteration/","section":"debugging","title":"Hail All Queens"},{"body":"Time to pay tribute to the queen! As a loyal citizen, you have the privilege of paying tribute to your queen each year. How lucky are you!\nIn this chapter, you need to define a new function that creates an object that represents your tribute to your queen. That new object will be added to a tribute chest (i.e. an array of tribute objects).\nLearning Objectives and Competencies At the end of this chapter you should be able to...\nDefine a function with parameters and explain why those parameters are needed. Create an object based on the value of function parameters. Add a new value to an existing array. Tribute Object Creator Setup Add the following line of code to the top of your main.js module.\n1const tributeChest = [] Description A tribute object will have three properties.\nAn id property for a unique numerical identifier of the tirbute. A description property to store the string description of your tribute. A queenId property to store the unique numerical identifier of a specific queen. Time for your first function to create a tribute object and add it to the tribute chest. Remember that a function must be properly written so that all of the information it needs to do its job can be captured as parameters.\nThis function's task is to create an object with three properties. The information it needs is what the value of each parameter will be. How many parameters must be defined for this function?\nHere is some code to get you started, or you can write your own. You can write this function anywhere in your main.js module, but it is suggested that it be near the top of the module.\n1const payTribute = () =\u0026gt; { 2 // Create a tribute object 3 4 5 // Add the tribute object to the tribute chest 6} Now fill in everything that is needed for this function to complete its task. If you get stuck, there are hints below.\nPay Your Tribute Now invoke your function at least three times to pay tribute to three different queens. This means that the argument value for the queen's id must be different each time you invoke the function.\nIf you get stuck, check out the hints below.\nWatch Your Code Run Time to practice using the debugger again. Put a breakpoint on the first line of code and step through your code, making sure you step into your new function to watch its logic.\nFor a review, you can watch a video that steps through the code and examines that values of variables as they change.\nHints Hint 1 - Parameters First define three parameters. You may pick your own variable names if you wish, or use the well-named ones provided.\n1const payTribute = (tributeId, tributeDescription, queenId) =\u0026gt; { 2 3} Hint 2 - Tribute object First define two parameters. You may pick your own variable names if you wish.\n1const payTribute = (tributeId, tributeDescription, queenId) =\u0026gt; { 2 const tribute = { 3 id: tributeId, 4 description: tributeDescription, 5 queenId: queenId 6 } 7 8} Hint 3 - Add to chest Use the .push() array method to add your tribute to the tribute chest.\n1const payTribute = (tributeId, tributeDescription, queenId) =\u0026gt; { 2 const tribute = { 3 id: tributeId, 4 description: tributeDescription, 5 queenId: queenId 6 } 7 8 tributeChest.push(tribute) 9} Hint 4 - Paying Tribute 1payTribute(1, \u0026#34;Barrel of wine\u0026#34;, 2) 2payTribute(2, \u0026#34;Silk\u0026#34;, 1) 3payTribute(3, \u0026#34;Bushel of oranges\u0026#34;, 3) 4payTribute(4, \u0026#34;Ten gold coins\u0026#34;, 1) ","link":"https://example.com/debugging/projects/queen/paying_tribute/","section":"debugging","title":"Paying Tribute"},{"body":"In this chapter, you are going to practice iterating the items in arrays again. This time, however, you will be writing a for..of loop inside another for..of loop.\nThis is called a nested loop.\nLearning Objectives and Competencies At the end of this chapter you should be able to...\nIterate the items in an array with a for..of loop. Correctly describe the syntax and operation of a for..of loop. Identify different block scopes created by for..of loops. Describe the scope of variables. Algorithm Here is a visual representation of the algorithm that you will implement for this chapter.\ngraph TB A[Iterate Queens] --\u003e|Each queen...| B[Iterate Tributes] B --\u003e C{Is tribute for me?} C --\u003e|Yes| D[Display tribute message] C --\u003e|No| E[Look at next item] Year-End Royal Inventory This first video talks about nested loops, and why that logic is needed for this chapter. Once you are done watching it, write the same code in your main.js module.\nThe next video walks through how to use the power of the debugger to help you determine what logic you need to write. Then it explains how to use an if statement to check if two values are the same, and if so, run some conditional logic.\nOnce you are done watching it, write the same code in your main.js module.\n","link":"https://example.com/debugging/projects/queen/displaying_tribute/","section":"debugging","title":"Displaying Tribute"},{"body":"","link":"https://example.com/debugging/projects/queen/assessment/","section":"debugging","title":"🎓 Self-Assessment"},{"body":" # 🌊 🏄🏾‍♂️ Sequina's Surf Shop 1 Surf Shop 2 Underwater Undefined 3 Constant Tide 4 Wave Function 5 Inventory Object 6 Lost at Sea 7 Surf Shop 8 Surf Shop 🎓 Self-Assessment ","link":"https://example.com/debugging/projects/surfshop/","section":"debugging","title":"Sequina's Surf Shop"},{"body":"","link":"https://example.com/categories/","section":"categories","title":"Categories"},{"body":" Welcome to Nashville Software School. Your team of coaches are going to be your partners and guides as you learn how to become a software developer. You will not be taught. You are here to learn, and we'll help you on that path. {{ now.Year }}\nYour Coaches Steve Brownlee Dakota Lambert Sydney Dickson Core Skills This is the client side portion of the experience where you will develop the following skills.\nEfficient technical learning Analytical thinking Algorithmic thinking Communication Language and Tools You will learn to express your algorithms with plain JavaScript at the beginning. Then you will learn how to use the popular library named React.\nStart Your Journey\n","link":"https://example.com/","section":"","title":"Compose"},{"body":"","link":"https://example.com/tags/","section":"tags","title":"Tags"}]